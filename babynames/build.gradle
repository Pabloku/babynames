apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

repositories {
  maven { url "https://jitpack.io" }
  maven { url "https://dl.bintray.com/rahulrav/kotlin-futures/" }
}

android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
  buildToolsVersion globalConfiguration["androidBuildToolsVersion"]

  defaultConfig {
    minSdkVersion globalConfiguration["androidMinSdkVersion"]
    targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
    versionCode globalConfiguration["androidVersionCode"]
    versionName globalConfiguration["androidVersionName"]
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  productFlavors {
    production {
      minSdkVersion globalConfiguration["androidMinSdkVersion"]
      applicationId 'com.kamisoft.babynames'
      def signingConfig = "babynames.signing.config"
      if (project.hasProperty(signingConfig) && new File(
          project.property(signingConfig) + ".gradle").exists()) {
        apply from: project.property(signingConfig) + ".gradle";
      }
    }
    develop {
      minSdkVersion = 21
      applicationId 'com.kamisoft.babynames.develop'
    }
  }
}

dependencies {
  def appDependencies = rootProject.ext.appDependencies
  def appTestDependencies = rootProject.ext.appTestDependencies

  compile appDependencies.appCompat
  compile appDependencies.supportDesign
  compile appDependencies.timber
  compile appDependencies.playServices
  compile appDependencies.firebaseCore
  compile appDependencies.firebaseRealtimeDB
  compile appDependencies.firebaseRemoteConfig
  compile appDependencies.firebaseCrashReporting
  compile appDependencies.firebaseAds
  androidTestCompile(appTestDependencies.espresso, {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  testCompile appTestDependencies.junit
  compile appDependencies.kotlin
  compile appDependencies.constraintLayout
  compile appDependencies.anko
  compile appDependencies.ankoAppCompatV7
  compile appDependencies.ankoDesign
  compile appDependencies.ankoRecyclerView
  compile appDependencies.ankoSqlite
  compile appDependencies.stepperIndicator
  compile appDependencies.recyclerView
  compile appDependencies.mosbyMvpLce
  compile appDependencies.recyclerViewFS
  compile appDependencies.kotlinCoroutines
  compile appDependencies.futures
  compile appDependencies.stetho
  compile appDependencies.materialDialogs
}

apply plugin: 'com.google.gms.google-services'

kotlin {
  experimental {
    coroutines "enable"
  }
}